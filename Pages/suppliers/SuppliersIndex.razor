@page "/suppliers"
@inject ISupplierService SupplierService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<PageTitle>Suppliers</PageTitle>

<MudContainer>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" @onclick="NavToCreate" Class="m-2">Create Supplier</MudButton>

    @if (SupplierList != null)
    {
        <MudTable Items="@SupplierList" Dense="false" Hover="true" Bordered="false" Striped="false" Filter="new Func<Supplier,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Class="mt-5 mb-3">
            <ToolBarContent>
                <MudText Typo="Typo.h6">My Supplier List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="SearchParam" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>PhoneNumber</MudTh>
                <MudTh>Active Status</MudTh>
                <MudTh>Inception Date</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Products Count">@context.Name</MudTd>
                <MudTd DataLabel="Name">@context.Email</MudTd>
                <MudTd DataLabel="Products Count">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Display">
                    @if (context.Active){<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Title="Active" />}
                    else{<MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Title="Inactive" />}
                </MudTd>
                <MudTd DataLabel="Display">@context.InceptionDate</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="edit" Title="Edit" @onclick="@(() => NavigationManager.NavigateTo($"/suppliers/{@context.Id}/edit"))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" Title="Delete" @onclick="@(() => DeleteSupplier(@context.Id))" ></MudIconButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudProgressLinear Color="Color.Success" Indeterminate="true" Class="my-7" />
    }
</MudContainer>

@code
{
    public Supplier[]? SupplierList;
    private string SearchParam = string.Empty;
    private Supplier selectedItem1 = null!;
    private bool FilterFunc1(Supplier element) => FilterFunc(element, SearchParam);
    private bool FilterFunc(Supplier element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetSupplierList();
    }

    async Task GetSupplierList()
    {
        SupplierList = await SupplierService.GetSuppliers()!;
    }

    async Task DeleteSupplier(int supplierId)
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", 
            $"You are about to delete supplier with id: {supplierId}"))
        {
            var response = await SupplierService.DeleteSupplier(supplierId);
            await OnInitializedAsync();
        }
    }

    void NavToCreate()
    {
        NavigationManager.NavigateTo("/suppliers/create");
    }
}