@page "/products/{Id:int}/update"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IUtilsService UtilsService
@attribute [Authorize]

@if (_productToEdit != null)
{
    <PageTitle>Update Product Page: @_productToEdit.Name</PageTitle>
    <MudContainer>
        <MudPaper Class="mb-5" Elevation="0">
            <h1 class="text-center">Update Product: @_productToEdit.Name</h1>
        </MudPaper>
        <ProductForm ProductDto="_productDto" ProductImages="_productImages" OnValidSubmit="OnValidSubmit" CreateResponse="Response" categories="_categories" ButtonTxt="Update Product"/>
    </MudContainer>
}
else
{
    <PageTitle>Update Product Page</PageTitle>
    <MudAlert Severity="Severity.Warning">Please select a valid product to update</MudAlert>

    <MudButton Class="mt-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SkipPrevious" Color="Color.Tertiary" @onclick="GoBack" aria-label="Go back">Go Back</MudButton>
}

@code
{
    [Parameter] public int Id { get; set; }
    private ProductDto _productDto = new ProductDto();
    private Product? _productToEdit;
    private Category[]? _categories;
    public string? Response;
    private IList<IBrowserFile>? _productImages = new List<IBrowserFile>();

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
        await GetProduct();

        if (_productToEdit != null)
        {
            _productDto.BarCode = _productToEdit.BarCode;
            _productDto.Name = _productToEdit.Name;
            _productDto.Category = _productToEdit.Category;
            _productDto.Quantity = _productToEdit.Quantity;
            _productDto.MinimumStock = _productToEdit.MinimumStock;
            _productDto.SafetyStock = _productToEdit.SafetyStock;
            _productDto.Cost = _productToEdit.Cost;
            _productDto.SalesPrice = _productToEdit.SalesPrice;
            _productDto.EndOfShelfLife = _productToEdit.EndOfShelfLife; //(ProductToEdit.EndOfShelfLife!.Value).ToDateTime(TimeOnly.Parse("10:00 PM"))
            _productDto.Location = _productToEdit.Location;
        }
    }

    private async Task GetCategories()
    {
        _categories = await CategoryService.GetCategories()!;
    }

    private async Task GetProduct()
    {
        _productToEdit = await ProductService.GetProduct(Id)!;
    }

    private async Task OnValidSubmit()
    {
        if (_productImages != null)
        {
            var location = await UtilsService.UploadImage(_productImages[0]);
            if (!string.IsNullOrEmpty(location))
                _productDto.Image = location;
        }
        
        var response = await ProductService.UpdateProduct(Id, _productDto);
        Snackbar.Add(response, Severity.Success);
        GoBack();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }

}