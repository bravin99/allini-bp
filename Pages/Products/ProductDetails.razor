@page "/products/{Id:int}/details"
@attribute [Authorize]
@inject IProductService ProductService
@inject ISupplierService SupplierService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@if (_pageProduct != null)
{
    <PageTitle>@_pageProduct.Name</PageTitle>
    <MudContainer>
        <MudPaper Class="mb-5" Elevation="1">
            <MudText Typo="Typo.h3" Class="text-center py-3">@_pageProduct.Name</MudText>
        </MudPaper>
        <MudPaper Class="mb-5" Elevation="0">
            <MudGrid Spacing="0">
                <MudItem xs="12" sm="6">
                    <MudPaper Class="d-flex align-center justify-center mud-width-full py-0" Elevation="0">
                        <MudList Clickable="true" Dense="false" DisableGutters="false">
                            <MudListItem> SKU: @_pageProduct.Sku </MudListItem>
                            <MudListItem> Barcode: @_pageProduct.BarCode </MudListItem>
                            <MudListItem> Name: @_pageProduct.Name </MudListItem>
                            <MudListItem> Category: @_pageProduct.Category.Name </MudListItem>
                            <MudListItem> Quantity: @_pageProduct.Quantity </MudListItem>
                            <MudListItem> End Of Shelf Life: @_pageProduct.EndOfShelfLife </MudListItem>
                            <MudListItem> Location: In @_pageProduct.Location </MudListItem>
                            <MudListItem> <img src="@_pageProduct.Image" alt="product image" /> </MudListItem>
                        </MudList>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Class="d-flex align-center justify-start mud-width-full py-0" Elevation="0">
                        <MudList Clickable="true" Dense="false" DisableGutters="false">
                            <MudListItem> Cost: @_pageProduct.Cost </MudListItem>
                            <MudListItem> Sales Price: @_pageProduct.SalesPrice </MudListItem>
                            <MudListItem> Minimum Stock: @_pageProduct.MinimumStock </MudListItem>
                            <MudListItem> Safety Stock: @_pageProduct.SafetyStock </MudListItem>
                            <MudListItem> Received: @_pageProduct.Recieved </MudListItem>
                            <MudListItem> Last Updated: @_pageProduct.LastCount </MudListItem>
                        </MudList>
                    </MudPaper>
                </MudItem>
            </MudGrid>
            
            <MudPaper Elevation="0">
                <MudGrid>
                    <MudItem xs="12" sm="12" Class="py-4 px-5">
                        <MudPaper Elevation="0" Class="d-flex align-center justify-start mud-width-full px-5">
                            <MudText Typo="Typo.h4" Class="text-start py-4">Suppliers</MudText>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="12" Class="py-4 px-5">
                        <MudPaper Elevation="0" Class="px-5">
                            <MudPaper Elevation="1" Class="w-100">
                                <MudGrid>
                                    <MudItem sm="8" xs="12">
                                        <MudSelect T="Supplier" @bind-Value="_selectedValue" @bind-SelectedValues="SelectedSuppliers" Label="Select Suppliers" MultiSelection="true" FullWidth="true" Class="px-4">
                                            @foreach (var option in AllSuppliers)
                                            {
                                                <MudSelectItem T="Supplier" Value="@option" >@option.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem sm="4" xs="12">
                                        <MudFab @onclick="AddSuppliers" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" Title="Add Supplier" />
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="10" Class="py-4 px-5">
                        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full px-4">
                            <MudTable Items="@_pageProduct.Suppliers" Hover="true" Loading="true" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.Sm" Class="mud-width-full">
                                <HeaderContent>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Phone</MudTh>
                                    <MudTh>Email</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh>Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Name">@context.Name</MudTd>
                                    <MudTd DataLabel="Phone Number">@context.PhoneNumber</MudTd>
                                    <MudTd DataLabel="Email">@context.Email</MudTd>
                                    <MudTd DataLabel="Status">
                                        @if (@context.Active)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="@Color.Success" Title="Active"></MudIcon>
                                        }
                                        else
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="@Color.Error" Title="InActive"></MudIcon>
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Actions">
                                        <MudIconButton Icon="@Icons.Material.Filled.PlaylistRemove" Color="Color.Error" aria-label="remove-supplier" Title="remove supplier" @onclick="@(() => RemoveSupplier(context.Id))"></MudIconButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

            </MudPaper>
            
        </MudPaper>
    </MudContainer>
}
else
{
    <PageTitle>Product Not Found</PageTitle>
    <MudAlert Severity="Severity.Warning">This product does not exist</MudAlert>

    <MudButton Class="mt-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SkipPrevious" 
               Color="Color.Tertiary" @onclick="GoBack" aria-label="Go back">Go Back</MudButton>
}


@code {

    [Parameter]
    public int Id { get; set; }

    private Product? _pageProduct;

    private Supplier[]? AllSuppliers { get; set; }
    private Supplier? _selectedValue;
    private IEnumerable<Supplier> SelectedSuppliers { get; set; } = new List<Supplier>();
    
    protected override async Task OnInitializedAsync()
    {
        await GetProduct();
        await GetAllSuppliers();
    }

    // get product function
    async Task GetProduct()
    {
        _pageProduct = await ProductService.GetProduct(Id)!;
    }

    async Task GetAllSuppliers()
    {
        AllSuppliers = await SupplierService.GetSuppliers()!;
    }

    void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }

    async Task AddSuppliers()
    {
        if (!SelectedSuppliers.Any())
        {
            Console.WriteLine("Please select suppliers to add");
            return;
        }

        var suppliersToAdd = new List<Supplier>(SelectedSuppliers);

        var response = await ProductService.AddSupplier(Id, suppliersToAdd);
        Snackbar.Add(response, Severity.Info);
        await OnInitializedAsync();
        StateHasChanged();
    }

    async Task RemoveSupplier(int supplierId)
    {
        var response = await ProductService.RemoveSupplier(_pageProduct!.Id, supplierId);
        Snackbar.Add(response, Severity.Info);
        await OnInitializedAsync();
        StateHasChanged();
    }

}
