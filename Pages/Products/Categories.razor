@page "/categories"
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime Js
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Categories</PageTitle>
<MudContainer>
    <CategoryForm ModelDto="NewCategory" OnValidSubmit="OnValidSubmit" CreateResponse="CreateResponse" ValidationSuccess="_validationSuccess" ButtonTxt="Create Category"/>

    <MudTable Items="@_categoryList" Dense="false" Hover="true" Bordered="false" Striped="false" Filter="new Func<Category,bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem1" Class="mt-5 mb-3">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Category List</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchParam" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Products Count</MudTh>
            <MudTh>Display</MudTh>
            <MudTh>Created</MudTh>
            <MudTh>Updated</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Products Count">@context.Products!.Count()</MudTd>
            <MudTd DataLabel="Display">@context.Display</MudTd>
            <MudTd DataLabel="Created">@context.Created</MudTd>
            <MudTd DataLabel="Updated">@context.Updated</MudTd>
            <MudTd DataLabel="Actions">
                <MudIconButton Icon="@Icons.Material.Filled.Add" Title="Add Products" Color="Color.Tertiary" aria-label="edit" @onclick="@(() => NavigationManager.NavigateTo($"/category/{context.Id}/product/create"))"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Title="Edit Category" Color="Color.Tertiary" aria-label="edit" @onclick="@(() => NavigationManager.NavigateTo($"/categories/{context.Id}/edit"))"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Title="Delete Category" Color="Color.Error" aria-label="delete" @onclick="@(() => DeleteCategory(@context.Id))"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudContainer>

@code
{
    @* table *@
    private Category[]? _categoryList;
    private string _searchParam = string.Empty;
    private Category _selectedItem1 = null!;
    private bool FilterFunc1(Category element) => FilterFunc(element, _searchParam);

    private static bool FilterFunc(Category element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    @* table end *@

    private CategoryDto NewCategory { get; set; } = new CategoryDto();
    private bool _validationSuccess = false;
    public string? CreateResponse;
    protected override async Task OnInitializedAsync()
    {
        await GetCategoryList();
    }

    private async Task GetCategoryList()
    {
        _categoryList = await CategoryService.GetCategories()!;
    }

    async void OnValidSubmit()
    {
        var response = await CategoryService.CreateCategory(NewCategory);
        _validationSuccess = true;
        Snackbar.Add(response, Severity.Success);
        NewCategory = new CategoryDto();
        StateHasChanged();
        await OnInitializedAsync();
    }

    async void DeleteCategory(int categoryId)
    {
        var c = await CategoryService.GetCategory(categoryId);
        
        if (await Js.InvokeAsync<bool>("confirm",
            $"Are you sure you want to delete {c.Name}?"))
        {
            var result = await CategoryService.DeleteCategory(c.Id);
            Snackbar.Add(result, Severity.Error);
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

}