@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment

<EditForm Model="@ProductDto" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Bar Code" HelperText="Max. 12 characters"
                                @bind-Value="ProductDto.BarCode" For="@(() => ProductDto!.BarCode)" Counter="12" Immediate="true" />
                    <MudTextField Label="Name" Class="mt-3"
                                @bind-Value="ProductDto.Name" For="@(() => ProductDto.Name)" />
                    <MudSelect T="Category" @bind-Value="ProductDto.Category" Label="Category" MultiSelection="false" Class="mt-3">
                        @if (categories != null)
                        {
                            @foreach (var selectItem in categories!)
                            {
                                <MudSelectItem Value="@selectItem">@selectItem.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudNumericField @bind-Value="ProductDto.Quantity" Label="Quantity" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.MinimumStock" Label="Minimum Stock" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.SafetyStock" Label="Safety Stock" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.Cost" Label="Cost" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.SalesPrice" Label="Sales Price" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="End Of Shelf Life" HelperText="Default is 24 months from now" 
                        @bind-Date="ProductDto.EndOfShelfLife" Class="mt-3" Color="Color.Success" />
                    <MudSelect @bind-Value="ProductDto.Location" Label="Select Location" HelperText="Current location of the product" Class="mt-3">
                        @foreach (Location item in Enum.GetValues(typeof(Location)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                    @* <MudSwitch Label="Display?" @bind-Checked="@ProductDto.Display" Color="Color.Secondary" Class="mt-3" /> *@
                    <MudItem Class="mt-3">
                        <InputFile OnChange="@LoadFiles" multiple/>
                    </MudItem>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto">@ButtonTxt</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">@CreateResponse</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    [Parameter] public ProductDto ProductDto { get; set; } = new ProductDto();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool success { get; set; } = false;
    [Parameter] public string ButtonTxt { get; set; } = "Create";
    // [Parameter] public DateTime? EndOfLifeDate { get; set; }
    [Parameter] public Category[]? categories { get; set; }
    [Parameter] public string? CreateResponse { get; set; }

    [Parameter]
    public List<IBrowserFile>? ProductImages { get; set; }

    private long maxFileSize = 1024 * 10 * 10;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    
    private string? stringValue { get; set; }

    private async void LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        ProductImages ??= new List<IBrowserFile>();
        var files = e.GetMultipleFiles(maxAllowedFiles);
        
        if (files == null) return;
        
        foreach (var file in files)
        {
            try
            {
                ProductImages.Add(file);
                var trustedFileNameForFileStorage = file.Name;
                var path = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads", 
                    trustedFileNameForFileStorage);
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                Snackbar.Add($"{file.Name} added", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"file upload error", Severity.Error);
                Console.WriteLine(ex);
            }
        }
        
    }
}