@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@inject IUtilsService UtilsService

<EditForm Model="@ProductDto" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Bar Code" HelperText="Max. 12 characters"
                                @bind-Value="ProductDto.BarCode" For="@(() => ProductDto!.BarCode)" Counter="12" Immediate="true" />
                    <MudTextField Label="Name" Class="mt-3"
                                @bind-Value="ProductDto.Name" For="@(() => ProductDto.Name)" />
                    <MudSelect T="Category" @bind-Value="ProductDto.Category" Label="Category" MultiSelection="false" Class="mt-3">
                        @if (categories != null)
                        {
                            @foreach (var selectItem in categories!)
                            {
                                <MudSelectItem Value="@selectItem">@selectItem.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudNumericField @bind-Value="ProductDto.Quantity" Label="Quantity" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.MinimumStock" Label="Minimum Stock" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.SafetyStock" Label="Safety Stock" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.Cost" Label="Cost" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudNumericField @bind-Value="ProductDto.SalesPrice" Label="Sales Price" Variant="Variant.Text" Min="0" Class="mt-3" />
                    <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="End Of Shelf Life" HelperText="Default is 24 months from now" 
                        @bind-Date="ProductDto.EndOfShelfLife" Class="mt-3" Color="Color.Success" />
                    <MudSelect @bind-Value="ProductDto.Location" Label="Select Location" HelperText="Current location of the product" Class="mt-3">
                        @foreach (Location item in Enum.GetValues(typeof(Location)))
                        {
                            <MudSelectItem Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                    @* <MudSwitch Label="Display?" @bind-Checked="@ProductDto.Display" Color="Color.Secondary" Class="mt-3" /> *@
                    @* <MudItem Class="mt-5"> *@
                    @*     <InputFile OnChange="@LoadFiles" multiple/> *@
                    @* </MudItem> *@
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFile">
                        <ButtonTemplate Context="productImageUpload">
                            <MudFab HtmlTag="label" Title="Add An Image"
                                    Color="Color.Success"
                                    Icon="@Icons.Material.Filled.Image"
                                    for="@productImageUpload" />
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto">@ButtonTxt</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">@CreateResponse</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</EditForm>

@code
{
    [Parameter] public ProductDto ProductDto { get; set; } = new ProductDto();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool success { get; set; } = false;
    [Parameter] public string ButtonTxt { get; set; } = "Create";
    // [Parameter] public DateTime? EndOfLifeDate { get; set; }
    [Parameter] public Category[]? categories { get; set; }
    [Parameter] public string? CreateResponse { get; set; }
    
    private long maxFileSize = 1024 * 10 * 10;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    
    private string? stringValue { get; set; }

    public async Task UploadFile(IBrowserFile file)
    {
        if (file == null!) return;
        var uploadResult = UtilsService.UploadImage(file);
        Console.WriteLine($"At update 1 {uploadResult.Result} -> {uploadResult}");
        if (uploadResult == null!)
        {
            Snackbar.Add("Image was not recognized", Severity.Error);
            return;
        }
        ProductDto.Image = uploadResult.Result;
    }

}