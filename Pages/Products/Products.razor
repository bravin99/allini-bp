@page "/products"
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Products</PageTitle>

<MudContainer>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Tertiary" @onclick="NavToCreate" Class="m-2">Create New Product</MudButton>
    <MudButton Color="Color.Info" @onclick="@(() => Snackbar.Add("The reactor was fired up successfully", Severity.Info))">Info Snackbar</MudButton>
    @if (_productList != null)
    {
        <MudTable Items="@_productList" Dense="false" Hover="true" Bordered="false" Striped="false" Filter="new Func<Product, bool>(FilterFunc1)" @bind-SelectedItem="_selectedItem" Class="mt-5 mb-3">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Product List</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchParam" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>SKU</MudTh>
                <MudTh>Bar Code</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Cost</MudTh>
                <MudTh>Sales Price</MudTh>
                @* <MudTh>Last Count</MudTh> *@
                <MudTh>Remaining</MudTh>
                <MudTh>Location</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Products Count">@context.Sku</MudTd>
                <MudTd DataLabel="Name">@context.BarCode</MudTd>
                <MudTd DataLabel="Products Count">@context.Name</MudTd>
                <MudTd DataLabel="Display">@context.Quantity</MudTd>
                <MudTd DataLabel="Display">@context.Cost</MudTd>
                <MudTd DataLabel="Created">@context.SalesPrice</MudTd>
                @* <MudTd DataLabel="Updated">@context.LastCount</MudTd> *@
                <MudTd DataLabel="Updated">@context.AdjustedCount</MudTd>
                <MudTd DataLabel="Updated">@context.Location</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Tertiary" aria-label="view" Title="View" @onclick="@(() => NavigationManager.NavigateTo($"/products/{context.Id}/details"))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Tertiary" aria-label="edit" Title="Edit" @onclick="@(() => NavigationManager.NavigateTo($"/products/{context.Id}/update"))"></MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="delete" Title="Delete" @onclick="@(() => DeleteProduct(context.Id))"></MudIconButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    }
    else
    {
        <MudProgressLinear Color="Color.Success" Indeterminate="true" Class="my-7" />
    }
</MudContainer>

@code
{
    private Product[]? _productList;
    private string _searchParam = string.Empty;
    private Product _selectedItem = null!;
    private bool FilterFunc1(Product element) => FilterFunc(element, _searchParam);

    private static bool FilterFunc(Product element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.BarCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }


    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }
    
    async Task GetProducts()
    {
        _productList = await ProductService.GetProducts()!;
    }

    async Task DeleteProduct(int productId)
    {
        if (_productList == null) return;
        var product = _productList.FirstOrDefault(p => p.Id == productId);
        
        if (await JsRuntime.InvokeAsync<bool>("confirm", 
            $"You are about to delete product: {product?.Name}"))
        {
            var response = await ProductService.DeleteProduct(productId);
            await OnInitializedAsync();
            Snackbar.Add(response, Severity.Success);
        }
    }

    private void NavToCreate()
    {
        NavigationManager.NavigateTo("/products/create");
    }
}
